<%- include("../partials/adminHeader") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        .error-message {
            color: red;
            margin-top: 5px;
            font-size: 14px;
        }
        .thumbnails-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
   }
    .thumbnail {
    max-width: 150px;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 5px;
   }
    </style>
</head>

<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-body">
                    <form id="productForm" method="post" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <!-- Product Name -->
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <!-- Brand -->
                        <div class="mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select" name="brand">
                                <option value="">Select Brand</option>
                                <% if (brand && brand.length > 0) { %>
                                    <% for (let i = 0; i < brand.length; i++) { %>
                                        <option value="<%= brand[i].brandName %>">
                                            <%= brand[i].brandName %>
                                        </option>
                                    <% } %>
                                <% } %>
                            </select>
                        </div>

                        <!-- Description -->
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea placeholder="Type here" name="description" class="form-control" rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <!-- Regular Price -->
                        <div class="mb-4">
                            <label class="form-label">Regular price</label>
                            <input placeholder="$" name="regularPrice" type="text" class="form-control">
                            <div id="regularPrice-error" class="error-message"></div>
                        </div>

                        <!-- Quantity -->
                        <div class="mb-4">
                            <label class="form-label">Quantity</label>
                            <input placeholder="" name="quantity" type="text" class="form-control">
                            <div id="quantity-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Category</label>
                            <select class="form-select" name="category" id="categorySelect">
                                <option value="">Select Category</option>
                                <% cat.forEach(category => { %>
                                    <option value="<%= category.name %>"><%= category.name %></option>
                                <% }); %>
                            </select>
                        </div>
                        

                        <div class="mb-4">
                            <label class="form-label">Subcategory</label>
                            <select class="form-select" name="subcategory" id="subcategorySelect">
                                <option value="">Select Subcategory</option>
                                <% subcategories.forEach(function(subcategory) { %> 
                                    <option value="<%= subcategory.subcategoryName %>"><%= subcategory.subcategoryName %></option>
                                <% }) %>
                            </select>
                        </div>
                                             
                        <!-- Image Upload -->
                        <div class="mb-4">
                            <label class="form-label">Product Images</label>
                            <input class="form-control" type="file" name="images" id="inputImages" accept="image/*" multiple onchange="handleFiles(event)">
                            <div class="thumbnails-container" id="thumbnailsContainer"></div>
                            <div id="images-error" class="error-message" style="color: red;"></div>
                        </div>

                        <!-- Publish Button -->
                        <div class="mt-4">
                            <button class="btn btn-primary" type="submit">Publish</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script>
     document.getElementById("productForm").addEventListener("submit", function(event) {
                                const imagesInput = document.getElementById("inputImages");
                                const errorDiv = document.getElementById("images-error");
                        
                                // Clear previous error message
                                errorDiv.innerText = "";
                        
                                // Check if at least 3 images are selected
                                if (!imagesInput.files || imagesInput.files.length < 3) {
                                    errorDiv.innerText = "Please upload at least 3 images.";
                                    event.preventDefault(); // Prevent form submission
                                    return false;
                                }
                            });
                        
                            function handleFiles(event) {
                                const files = event.target.files;
                                const thumbnailsContainer = document.getElementById("thumbnailsContainer");
                                thumbnailsContainer.innerHTML = ""; // Clear previous thumbnails
                        
                                if (files.length >= 3) {
                                    for (let i = 0; i < files.length; i++) {
                                        const file = files[i];
                                        const reader = new FileReader();
                        
                                        reader.onload = function(e) {
                                            const img = document.createElement("img");
                                            img.src = e.target.result;
                                            img.style.width = "100px"; // Set thumbnail size
                                            img.style.margin = "5px";
                                            thumbnailsContainer.appendChild(img);
                                        };
                        
                                        reader.readAsDataURL(file);
                                    }
                                } else {
                                    document.getElementById("images-error").innerText = "Please select at least 3 images.";
                                }
                            }
                            let cropperInstances = [];

                            function handleFiles(event) {
    const files = event.target.files;
    const thumbnailsContainer = document.getElementById('thumbnailsContainer');
    thumbnailsContainer.innerHTML = ''; // Clear existing thumbnails
    cropperInstances = []; // Clear existing cropper instances

    Array.from(files).forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = function (e) {
            const imageContainer = document.createElement('div');
            imageContainer.style.position = 'relative';
            imageContainer.style.display = 'inline-block';
            imageContainer.style.margin = '10px';
            thumbnailsContainer.appendChild(imageContainer);

            const image = new Image();
            image.src = e.target.result;
            image.classList.add('thumbnail');
            image.style.border = '1px solid #ddd';
            image.style.padding = '5px';
            imageContainer.appendChild(image);

            // Initialize Cropper.js on the image
            const cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true,
                background: false, // Removes the dark background
                autoCropArea: 1,
                zoomable: true,
                dragMode: 'crop',
                cropBoxResizable: true,
                cropBoxMovable: true,
                minCropBoxWidth: 100,
                minCropBoxHeight: 100
            });
            cropperInstances.push(cropper);
        };
        reader.readAsDataURL(file);
    });
}
    async function validateForm() {
        resetErrorMessages();
        let isValid = true;

        const productName = document.getElementById("product_name").value;
        const regularPrice = document.getElementsByName("regularPrice")[0].value;
        const quantity = document.getElementsByName("quantity")[0].value;
        const imagesInput = document.getElementById("inputImages");

        if (productName.trim() === "") {
            displayErrorMessage("productName-error", "Product Name is required");
            isValid = false;
        }

        if (isNaN(regularPrice) || regularPrice <= 0) {
            displayErrorMessage("regularPrice-error", "Regular price must be a positive number");
            isValid = false;
        }

        if (!/^[1-9]\d*$/.test(quantity)) {
            displayErrorMessage("quantity-error", "Quantity must be a positive integer");
            isValid = false;
        }

        if (imagesInput.files.length < 1) {
            displayErrorMessage("images-error", "At least one image is required");
            isValid = false;
        }
        if (!isValid) {
            return false;
        }

        // Process images and prepare them for submission
        const formData = new FormData(document.getElementById('productForm'));

        for (let i = 0; i < cropperInstances.length; i++) {
            const cropper = cropperInstances[i];
            const croppedCanvas = cropper.getCroppedCanvas();
            await new Promise((resolve) => {
                croppedCanvas.toBlob((blob) => {
                    formData.append("images", blob, `image_${i}`);
                    resolve();
                });
            });
        }
        // Manually submit the form with images
        const xhr = new XMLHttpRequest();
        xhr.open("POST", "/admin/addProducts", true);
        // xhr.onload = function () {
        //     if (xhr.status === 200) {
        //         window.location.href = '/admin/products';
        //     } else {
        //         alert("An error occurred while submitting the form.");
        //     }
        // };
        xhr.send(formData);
        return false; // Prevent default form submission
    }

    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }


    function resetErrorMessages() {
        const errorElements = document.querySelectorAll(".error-message");
        errorElements.forEach((element) => {
            element.innerText = "";
            element.style.display = "none";
        });
    }


document.addEventListener('DOMContentLoaded', function() {
    const categorySelect = document.getElementById('categorySelect');
    const subcategorySelect = document.getElementById('subcategorySelect');

    categorySelect.addEventListener('change', async function() {
        const selectedCategoryId = this.value;
        
        // Reset subcategory select
        subcategorySelect.innerHTML = '<option value="">Select Subcategory</option>';
        
        if (!selectedCategoryId) return;

        try {
            // Show loading state
            console.log("Haaaa")
            subcategorySelect.innerHTML = '<option value="">Loading...</option>';
            
            const response = await fetch('/admin/get-subcategories', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ categoryId: selectedCategoryId })
            });

            if (!response.ok) {
                throw new Error('Failed to fetch subcategories');
            }

            const subcategories = await response.json();
            
            // Reset select with default option
            subcategorySelect.innerHTML = '<option value="">Select Subcategory</option>';

            // Check if we got any subcategories
            if (!subcategories || subcategories.length === 0) {
                subcategorySelect.innerHTML = '<option value="">No subcategories available</option>';
                return;
            }

            // Add subcategories to select
            subcategories.forEach(subcategory => {
                const option = document.createElement('option');
                option.value = subcategory._id;
                option.textContent = subcategory.subcategoryName;
                subcategorySelect.appendChild(option);
            });

        } catch (error) {
            console.error('Error:', error);
            subcategorySelect.innerHTML = '<option value="">Error loading subcategories</option>';
        }
    });
});
</script>


 <%- include("../partials/adminFooter") %>