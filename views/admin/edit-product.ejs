<%- include("../partials/adminHeader") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        .error-message {
            color: red;
            margin-top: 5px;
            font-size: 14px;
        }
        .thumbnails-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
   }
    .thumbnail {
    max-width: 150px;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 5px;
   }
    </style>
</head>

<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-body">
                    <form action="/admin/editProduct/<%= product._id %>" method="POST" enctype="multipart/form-data">
                    <form id="productForm" method="post" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <!-- Product Name -->
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name" value="<%= product.productName %>">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <!-- Brand -->
                        <div class="mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select" name="brand">
                                <option value="">Select Brand</option>
                                <% brand.forEach(br => { %>
                                    <option value="<%= br.brandName %>" <%= br.brandName === product.brand ? 'selected' : '' %>>
                                        <%= br.brandName %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>

                        <!-- Description -->
                        <div class="mb-4">
                            <label class="form-label">Full Description</label>
                            <textarea placeholder="Type here" name="description" class="form-control" rows="4"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <!-- Regular Price -->
                        <div class="mb-4">
                            <label class="form-label">Regular Price</label>
                            <input placeholder="$" name="regularPrice" type="text" class="form-control" value="<%= product.regularPrice %>">
                            <div id="regularPrice-error" class="error-message"></div>
                        </div>

                        <!-- Quantity -->
                        <div class="mb-4">
                            <label class="form-label">Quantity</label>
                            <input placeholder="" name="quantity" type="text" class="form-control" value="<%= product.quantity %>">
                            <div id="quantity-error" class="error-message"></div>
                        </div>

                        <!-- Category -->
                        <div class="mb-4">
                            <label class="form-label">Category</label>
                            <select class="form-select" name="category" id="categorySelect">
                                <option value="">Select Category</option>
                                <% cat.forEach(category => { %>
                                    <option value="<%= category.name %>" <%= category.name.toString() === product.category.toString() ? 'selected' : '' %>>
                                        <%= category.name %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>

                        <!-- Subcategory -->
                        <div class="mb-4">
                            <label class="form-label">Subcategory</label>
                            <select class="form-select" name="subcategory" id="subcategorySelect">
                                <% subcategories.forEach(subcategory => { %>
                                    <option value="<%= subcategory._id %>"
                                        <%= (subcategory.subcategoryName && product.subcategory && subcategory.subcategoryName.toString() === product.subcategory.toString()) ? 'selected' : '' %>>
                                        <%= subcategory.subcategoryName %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>

                        <!-- Image Preview -->
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>update images</h4>
                            </div>

                            <div id="addedImagesContainer" class="col-md-6">
                                <% for (let i=0; i < product.productImage.length; i++) { %>
                                    <div class="col-md-12 mb-4">
                                        <div class="row">
                                            <div class="col-12">
                                                <img class="rounded" style="width: 50px; height: 60px;"
                                                    src="/uploads/product-images/<%= product.productImage[i] %>"
                                                    alt="image" data-filename="<%= product.productImage[i] %>">
                                                <span class="delete-icon"
                                                    onclick="deleteImage('<%= product._id %>', '<%= product.productImage[i] %>')">‚ùå</span>
                                            </div>
                                        </div>
                                    </div>
                                    <% } %>
                            </div>

                        <!-- Image Upload -->
                        <div class="mb-4">
                            <label class="form-label">upload Images</label>
                            <input class="form-control" type="file" name="images" id="inputImages" accept="image/*" multiple onchange="handleFiles(event)">
                            <div class="thumbnails-container" id="thumbnailsContainer"></div>
                            <div id="images-error" class="error-message" style="color: red;"></div>
                        </div>

                        <!-- Submit Button -->
                        <div class="mt-4">
                            <button class="btn btn-primary" type="submit">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>


<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script>
   document.getElementById("productForm").addEventListener("submit", function(event) {
    const imagesInput = document.getElementById("inputImages");
    const errorDiv = document.getElementById("images-error");

    // Clear previous error message
    errorDiv.innerText = "";

});

function handleFiles(event) {
    const files = event.target.files;
    const thumbnailsContainer = document.getElementById('thumbnailsContainer');
    thumbnailsContainer.innerHTML = ''; // Clear existing thumbnails
    cropperInstances = []; // Clear existing cropper instances

    // Remove any previous error message if images are selected
    const errorDiv = document.getElementById("images-error");
    errorDiv.innerText = "";

    Array.from(files).forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = function (e) {
            const imageContainer = document.createElement('div');
            imageContainer.style.position = 'relative';
            imageContainer.style.display = 'inline-block';
            imageContainer.style.margin = '10px';
            thumbnailsContainer.appendChild(imageContainer);

            const image = new Image();
            image.src = e.target.result;
            image.classList.add('thumbnail');
            image.style.border = '1px solid #ddd';
            image.style.padding = '5px';
            image.style.width = '100px';
            imageContainer.appendChild(image);

            // Initialize Cropper.js on the image
            const cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 1,
                zoomable: true,
                dragMode: 'crop',
                cropBoxResizable: true,
                cropBoxMovable: true,
                minCropBoxWidth: 100,
                minCropBoxHeight: 100
            });
            cropperInstances.push(cropper);
        };
        reader.readAsDataURL(file);
    });
}
async function validateForm() {
    resetErrorMessages();
    let isValid = true;

    const productName = document.getElementById("product_name").value;
    const regularPrice = document.getElementsByName("regularPrice")[0].value;
    const quantity = document.getElementsByName("quantity")[0].value;
    const imagesInput = document.getElementById("inputImages");

    if (productName.trim() === "") {
        displayErrorMessage("productName-error", "Product Name is required");
        isValid = false;
    }

    if (isNaN(regularPrice) || regularPrice <= 0) {
        displayErrorMessage("regularPrice-error", "Regular price must be a positive number");
        isValid = false;
    }

    if (!/^[1-9]\d*$/.test(quantity)) {
        displayErrorMessage("quantity-error", "Quantity must be a positive integer");
        isValid = false;
    }

    // Remove the image validation for existing products
    // if (imagesInput.files.length < 1) {
    //     displayErrorMessage("images-error", "At least one image is required");
    //     isValid = false;
    // }

    if (!isValid) {
        return false;
    }

    // Prepare form data for submission
    const formData = new FormData(document.getElementById('productForm'));

    // Process cropped images if any
    if (cropperInstances && cropperInstances.length > 0) {
        for (let i = 0; i < cropperInstances.length; i++) {
            const cropper = cropperInstances[i];
            const croppedCanvas = cropper.getCroppedCanvas();
            await new Promise((resolve) => {
                croppedCanvas.toBlob((blob) => {
                    formData.append("images", blob, `image_${i}.png`);
                    resolve();
                });
            });
        }
    }

    // Use fetch instead of XMLHttpRequest for better promise-based handling
    try {
        const response = await fetch('/admin/editProduct/<%= product._id %>', {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            window.location.href = '/admin/products';
        } else {
            const errorText = await response.text();
            alert(`Error: ${errorText}`);
        }
    } catch (error) {
        console.error('Submission error:', error);
        alert('An error occurred while submitting the form');
    }

    return false; // Prevent default form submission
}


    function resetErrorMessages() {
        const errorElements = document.querySelectorAll(".error-message");
        errorElements.forEach((element) => {
            element.innerText = "";
            element.style.display = "none";
        });
    }

//     function fetchSubcategories(categoryId) {
//         // Clear the existing subcategories
//         const subcategorySelect = document.getElementById('subcategorySelect');
//         subcategorySelect.innerHTML = '<option value="">Select Subcategory</option>';

        
//     async function fetchSubcategories(categoryId) {
//         // Check if a category is selected
//         if (categoryId === "") {
//             document.getElementById('subcategorySelect').innerHTML = '<option value="">Select Subcategory</option>';
//             return;
//         }

//         try {
//             const response = await fetch(`/admin/get-subcategories?categoryId=${categoryId}`);
//             const subcategories = await response.json();

//             // Populate the subcategory dropdown
//             const subcategorySelect = document.getElementById('subcategorySelect');
//             subcategorySelect.innerHTML = '<option value="">Select Subcategory</option>';

//             subcategories.forEach(subcat => {
//                 const option = document.createElement('option');
//                 option.value = subcat._id;
//                 option.textContent = subcat.subcategoryName;
//                 subcategorySelect.appendChild(option);
//             });
//         } catch (error) {
//             console.error('Error fetching subcategories:', error);
//         }
//     }
// }
document.addEventListener('DOMContentLoaded', function() {
    const categorySelect = document.getElementById('categorySelect');
    const subcategorySelect = document.getElementById('subcategorySelect');

    categorySelect.addEventListener('change', async function() {
        const selectedCategoryId = this.value;
        
        // Reset subcategory select
        subcategorySelect.innerHTML = '<option value="">Select Subcategory</option>';
        
        if (!selectedCategoryId) return;

        try {
            // Show loading state
            subcategorySelect.innerHTML = '<option value="">Loading...</option>';
            
            const response = await fetch('/admin/get-subcategories', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ categoryId: selectedCategoryId })
            });

            if (!response.ok) {
                throw new Error('Failed to fetch subcategories');
            }

            const subcategories = await response.json();
            
            // Reset select with default option
            subcategorySelect.innerHTML = '<option value="">Select Subcategory</option>';

            // Check if we got any subcategories
            if (!subcategories || subcategories.length === 0) {
                subcategorySelect.innerHTML = '<option value="">No subcategories available</option>';
                return;
            }

            // Add subcategories to select
            subcategories.forEach(subcategory => {
                const option = document.createElement('option');
                option.value = subcategory._id;
                option.textContent = subcategory.subcategoryName;
                subcategorySelect.appendChild(option);
            });

        } catch (error) {
            console.error('Error:', error);
            subcategorySelect.innerHTML = '<option value="">Error loading subcategories</option>';
        }
    });
});
function deleteImage(productId, filename) {
    fetch('/admin/deleteImage', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId, filename })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Change this selector to match your HTML
            document.querySelector(`[data-filename="${filename}"]`).closest('.col-md-12').remove();
        } else {
            alert(data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to delete image');
    });
}
</script>


 <%- include("../partials/adminFooter") %>
 